choices = c('Sepal.Length','Sepal.Width','Petal.Length','Petal.Width')
#tmb se podria poner colnames(iris)
#si quisiera poner un valor de una determinada variable unique(iris$species)
)
),
selectInput('vary',
label='Variable y',
choices = c('Sepal.Length','Sepal.Width','Petal.Length','Petal.Width')
#tmb se podria poner colnames(iris)
#si quisiera poner un valor de una determinada variable unique(iris$species)
)
),
mainPanel(
sliderInput('bins','Cantidad de Intervalos',min=10,max=20, value=10),
plotOutput('grafico')
)
)
)
output$grafico <- renderPlot({
gr <- ggplot(iris,aes_string(x=input$graficar))
gr <- gr + geom_histogram(bins=input$bins)
gr <- gr + ggtitle(input$graficar)
gr
})
server <- function(input, output) {
output$grafico <- renderPlot({
gr <- ggplot(iris,aes_string(x=input$graficar))
gr <- gr + geom_histogram(bins=input$bins)
gr <- gr + ggtitle(input$graficar)
gr
})
({
gr1 <- ggplot(iris,aes(input$varx,input$vary))
gr1 <- gr1 + geom_point()
gr1 <- gr1 + ggtitle(input$graficar)
gr1
})
}
ui <- fluidPage(
ui <- fluidPage(
titlePanel("Histograma"),
sidebarLayout(
sidebarPanel(
selectInput('graficar',
label='Que variable se grafica?',
choices = c('Sepal.Length','Sepal.Width','Petal.Length','Petal.Width')
#tmb se podria poner colnames(iris)
#si quisiera poner un valor de una determinada variable unique(iris$species)
)
),
selectInput('varx',
label='Variable X',
choices = c('Sepal.Length','Sepal.Width','Petal.Length','Petal.Width')
#tmb se podria poner colnames(iris)
#si quisiera poner un valor de una determinada variable unique(iris$species)
),
selectInput('vary',
label='Variable y',
choices = c('Sepal.Length','Sepal.Width','Petal.Length','Petal.Width')
#tmb se podria poner colnames(iris)
#si quisiera poner un valor de una determinada variable unique(iris$species)
),
mainPanel(
sliderInput('bins','Cantidad de Intervalos',min=10,max=20, value=10),
plotOutput('grafico')
))
ui <- fluidPage(
titlePanel("Histograma"),
sidebarLayout(
sidebarPanel(
selectInput('graficar',
label='Que variable se grafica?',
choices = c('Sepal.Length','Sepal.Width','Petal.Length','Petal.Width')
#tmb se podria poner colnames(iris)
#si quisiera poner un valor de una determinada variable unique(iris$species)
)
),
selectInput('varx',
label='Variable X',
choices = c('Sepal.Length','Sepal.Width','Petal.Length','Petal.Width')
#tmb se podria poner colnames(iris)
#si quisiera poner un valor de una determinada variable unique(iris$species)
),
selectInput('vary',
label='Variable y',
choices = c('Sepal.Length','Sepal.Width','Petal.Length','Petal.Width')
#tmb se podria poner colnames(iris)
#si quisiera poner un valor de una determinada variable unique(iris$species)
),
mainPanel(
sliderInput('bins','Cantidad de Intervalos',min=10,max=20, value=10),
plotOutput('grafico')
))
ui <- fluidPage(
titlePanel("Histograma"),
sidebarLayout(
sidebarPanel(
selectInput('graficar',
label='Que variable se grafica?',
choices = c('Sepal.Length','Sepal.Width','Petal.Length','Petal.Width')
#tmb se podria poner colnames(iris)
#si quisiera poner un valor de una determinada variable unique(iris$species)
)
),
selectInput('varx',
label='Variable X',
choices = c('Sepal.Length','Sepal.Width','Petal.Length','Petal.Width')
#tmb se podria poner colnames(iris)
#si quisiera poner un valor de una determinada variable unique(iris$species)
),
selectInput('vary',
label='Variable y',
choices = c('Sepal.Length','Sepal.Width','Petal.Length','Petal.Width')
#tmb se podria poner colnames(iris)
#si quisiera poner un valor de una determinada variable unique(iris$species)
),
mainPanel(
sliderInput('bins','Cantidad de Intervalos',min=10,max=20, value=10),
plotOutput('grafico')
))
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Histograma"),
sidebarLayout(
sidebarPanel(
selectInput('varx',
label='Variable X',
choices = c('Sepal.Length','Sepal.Width','Petal.Length','Petal.Width')
#tmb se podria poner colnames(iris)
#si quisiera poner un valor de una determinada variable unique(iris$species)
),
selectInput('vary',
label='Variable y',
choices = c('Sepal.Length','Sepal.Width','Petal.Length','Petal.Width')
#tmb se podria poner colnames(iris)
#si quisiera poner un valor de una determinada variable unique(iris$species)
)
),
mainPanel(
sliderInput('bins','Cantidad de Intervalos',min=10,max=20, value=10),
plotOutput('grafico')
)
)
)
ui <- fluidPage(
titlePanel("Histograma"),
sidebarLayout(
sidebarPanel(
selectInput('varx',
label='Variable X',
choices = c('Sepal.Length','Sepal.Width','Petal.Length','Petal.Width')
#tmb se podria poner colnames(iris)
#si quisiera poner un valor de una determinada variable unique(iris$species)
),
selectInput('vary',
label='Variable y',
choices = c('Sepal.Length','Sepal.Width','Petal.Length','Petal.Width')
#tmb se podria poner colnames(iris)
#si quisiera poner un valor de una determinada variable unique(iris$species)
)
),
mainPanel(
plotOutput('grafico')
)
)
)
server <- function(input, output) {
output$grafico=renderPlot({
gr1 <- ggplot(iris,aes(input$varx,input$vary))
gr1 <- gr1 + geom_point()
gr1 <- gr1
gr1
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
output$grafico=renderPlot({
gr1 <- ggplot(iris,aes_string(input$varx,input$vary))
gr1 <- gr1 + geom_point()
gr1 <- gr1
gr1
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Histograma"),
sidebarLayout(
sidebarPanel(
selectInput('varx',
label='Variable X',
choices = colnames(iris)[1:4],
selected = colnames(iris)[2]
#tmb se podria poner colnames(iris)
#si quisiera poner un valor de una determinada variable unique(iris$species)
),
selectInput('vary',
label='Variable y',
choices = c('Sepal.Length','Sepal.Width','Petal.Length','Petal.Width')
#tmb se podria poner colnames(iris)
#si quisiera poner un valor de una determinada variable unique(iris$species)
)
),
mainPanel(
plotOutput('grafico')
)
)
)
shinyApp(ui = ui, server = server)
paste0("el usuario seleccionó:",input$varx,input$vary)
server <- function(input, output) {
output$grafico=renderPlot({
gr1 <- ggplot(iris,aes_string(input$varx,input$vary))
gr1 <- gr1 + geom_point()
gr1 <- gr1
gr1
})
output$texto <- renderText({
paste0("el usuario seleccionó:",input$varx,input$vary)
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
output$grafico=renderPlot({
gr1 <- ggplot(iris,aes_string(input$varx,input$vary))
gr1 <- gr1 + geom_point()
gr1 <- gr1
gr1
})
output$texto <- renderText({
paste0("el usuario seleccionó:",input$varx)
})
}
shinyApp(ui = ui, server = server)
paste0("el usuario selecciono:",input$varx)
server <- function(input, output) {
output$grafico=renderPlot({
gr1 <- ggplot(iris,aes_string(input$varx,input$vary))
gr1 <- gr1 + geom_point()
gr1 <- gr1
gr1
})
output$texto <- renderText({
paste0("el usuario selecciono:",input$varx)
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Histograma"),
sidebarLayout(
sidebarPanel(
selectInput('varx',
label='Variable X',
choices = colnames(iris)[1:4],
selected = colnames(iris)[2]
#tmb se podria poner colnames(iris)
#si quisiera poner un valor de una determinada variable unique(iris$species)
),
selectInput('vary',
label='Variable y',
choices = c('Sepal.Length','Sepal.Width','Petal.Length','Petal.Width')
#tmb se podria poner colnames(iris)
#si quisiera poner un valor de una determinada variable unique(iris$species)
)
),
mainPanel(
plotOutput('grafico'),
verbatimTextOutput("texto")
)
)
)
server <- function(input, output) {
output$grafico=renderPlot({
gr1 <- ggplot(iris,aes_string(input$varx,input$vary))
gr1 <- gr1 + geom_point()
gr1 <- gr1
gr1
})
output$texto <- renderText({
paste0("el usuario seleccionó:",input$varx,input$vary)
})
}
paste0("el usuario seleccionó:",input$varx,"y tambien", input$vary)
server <- function(input, output) {
output$grafico=renderPlot({
gr1 <- ggplot(iris,aes_string(input$varx,input$vary))
gr1 <- gr1 + geom_point()
gr1 <- gr1
gr1
})
output$texto <- renderText({
paste0("el usuario seleccionó:",input$varx,"y tambien", input$vary)
})
}
shinyApp(ui = ui, server = server)
library(rtweet)
# Aqui van las credenciales que les otorga twitter
create_token(
app = "arg debate",
consumer_key = ' Esu8c18pPSwNXu7opx7QVnTC8   ',
consumer_secret = ' yJtHpFg1Fr6Hsua8epQ113qGtALl1jXhvO01SkTCtUUGOhReVV   ',
access_token = ' 717105716885123072-WCbPsjfgUWplA77OYkb6eBE6i7AOpr7  ',
access_secret = ' IB372Oxq2eNXKrVWXMtslFGljsTzd6Yve9txskP8F56BC   ')
#obtengo la ubicación de tweets de Arg
arg <- lookup_coords("arg")
tw<- search_tweets(q='economía desarrollo',n = 200,type="popular",geocode = "-35.01,-58.09, 1mi")
# Aqui van las credenciales que les otorga twitter
create_token(
app = "arg debate",
consumer_key = ' Esu8c18pPSwNXu7opx7QVnTC8   ',
consumer_secret = ' yJtHpFg1Fr6Hsua8epQ113qGtALl1jXhvO01SkTCtUUGOhReVV   ',
access_token = ' 717105716885123072-WCbPsjfgUWplA77OYkb6eBE6i7AOpr7  ',
access_secret = ' IB372Oxq2eNXKrVWXMtslFGljsTzd6Yve9txskP8F56BC   ')
tw<- search_tweets(q='economía desarrollo',n = 200,type="popular",geocode = "-35.01,-58.09, 1mi")
# Aqui van las credenciales que les otorga twitter
create_token(
app = "16172945",
consumer_key = ' Esu8c18pPSwNXu7opx7QVnTC8   ',
consumer_secret = ' yJtHpFg1Fr6Hsua8epQ113qGtALl1jXhvO01SkTCtUUGOhReVV   ',
access_token = ' 717105716885123072-WCbPsjfgUWplA77OYkb6eBE6i7AOpr7  ',
access_secret = ' IB372Oxq2eNXKrVWXMtslFGljsTzd6Yve9txskP8F56BC   ')
tw<- search_tweets(q='economía desarrollo',n = 200,type="popular",geocode = "-35.01,-58.09, 1mi")
# Aqui van las credenciales que les otorga twitter
token <- create_token(
app = "16172945",
consumer_key = ' Esu8c18pPSwNXu7opx7QVnTC8   ',
consumer_secret = ' yJtHpFg1Fr6Hsua8epQ113qGtALl1jXhvO01SkTCtUUGOhReVV   ',
access_token = ' 717105716885123072-WCbPsjfgUWplA77OYkb6eBE6i7AOpr7  ',
access_secret = ' IB372Oxq2eNXKrVWXMtslFGljsTzd6Yve9txskP8F56BC   ')
tw<- search_tweets(q='economía desarrollo',n = 200,type="popular",geocode = "-35.01,-58.09, 1mi")
tw<- search_tweets(q='economía desarrollo',n = 200,type="popular",geocode = "-35.01,-58.09, 1mi", token = 'token')
tw<- search_tweets(q='economía desarrollo',n = 200,type="popular",geocode = "-35.01,-58.09, 1mi", token = '717105716885123072-WCbPsjfgUWplA77OYkb6eBE6i7AOpr7')
tw<- search_tweets(q='economía desarrollo',n = 200,type="popular",geocode = "-35.01,-58.09, 1mi", token = 'IB372Oxq2eNXKrVWXMtslFGljsTzd6Yve9txskP8F56BC')
install.packages("plotly")
library("plotly")
ggplotly(ggplot(fliasH,aes(VASA16_01))+geom_bar()+facet_grid(.~lp)+scale_y_continuous(limits= c(0,500)) +theme(axis.text.x = element_text(angle = 90, hjust = 1)))
setwd("C:/Users/perla/OneDrive/Documents/ssyr/data")
datosMujeres=read.table("ENSSyR_Mujeres_BaseUsuario.txt", header=T, sep="|")
datosMujeres$canta <- 2013-datosMujeres$MEP10
summary(datosMujeres$canta)
datosMujeres <- datosMujeres[datosMujeres$canta=<0,]
datosMujeres <- datosMujeres[datosMujeres$canta<=0,]
setwd("C:/Users/perla/OneDrive/Documents/ssyr/data")
datosMujeres=read.table("ENSSyR_Mujeres_BaseUsuario.txt", header=T, sep="|")
df_corte <- datosMujeres[datosMujeres$MEP11=="Embarazo no deseado",]
summary(df_corte$canta)
df_corte$canta <- 2013-df_corte$MEP10
summary(df_corte$canta)
head(df_corte$canta)
datosMujeres=read.table("ENSSyR_Mujeres_BaseUsuario.txt", header=T, sep="|")
df_corte <- datosMujeres[datosMujeres$MEP11=="Embarazo no deseado",]
df_corte$canta <- 2013-df_corte$MEP10
head(df_corte$canta)
View(df_corte)
View(df_corte)
datosMujeres=read.table("ENSSyR_Mujeres_BaseUsuario.txt", header=T, sep="|")
df_corte <- datosMujeres[datosMujeres$MEP11=="Embarazo no deseado",]
View(df_corte)
df_corte <- datosMujeres[which (datosMujeres$MEP11=="Embarazo no deseado"),]
datosMujeres=read.table("ENSSyR_Mujeres_BaseUsuario.txt", header=T, sep="|")
df_corte <- datosMujeres[which (datosMujeres$MEP11=="Embarazo no deseado"),]
datosMujeres=read.table("ENSSyR_Mujeres_BaseUsuario.txt", header=T, sep="|")
setwd("C:/Users/perla/OneDrive/Documents/ssyr/data")
datosMujeres=read.table("ENSSyR_Mujeres_BaseUsuario.txt", header=T, sep="|")
datosMujeres$MEP11 <- ifelse (datosMujeres$MEP11== 1, "Embarazo deseado","Embarazo no deseado" )
datosMujeres= datosMujeres[!is.na(datosMujeres$MEP11),]
df_corte <- datosMujeres[which (datosMujeres$MEP11=="Embarazo no deseado"),]
datosMujeres=read.table("ENSSyR_Mujeres_BaseUsuario.txt", header=T, sep="|")
datosMujeres$MEP11 <- ifelse (datosMujeres$MEP11== 1, "Embarazo deseado","Embarazo no deseado" )
datosMujeres= datosMujeres[!is.na(datosMujeres$MEP11),]
df_corte <- datosMujeres[which (datosMujeres$MEP11=="Embarazo no deseado"),]
View(df_corte)
df_corte$canta <- 2013-df_corte$MEP10
summary(df_corte$canta)
df_corte$edadUH <- df_corte$EDAD-df_corte$canta
boxplot(datosMujeres$edadUH)
boxplot(df_corte$edadUH)
sumary(df_corte$edadUH)
summary(df_corte$edadUH)
df_corte$GRUPEDAD_UH <- ifelse(df_corte$edadUH<20,"13 a 19 años",
ifelse(df_corte$edadUH<30, "20 a 29 años",
ifelse(df_corte$edadUH<40,"30 a 39 años",
ifelse(df_corte$edadUH<50,"40 a 49 años"))))
g1 <- nrow(df_corte[df_corte$GRUPEDAD_UH=="13 a 19 años",])
g2 <- nrow(df_corte[df_corte$GRUPEDAD_UH=="20 a 29 años",])
g3 <- nrow(df_corte[df_corte$GRUPEDAD_UH=="30 a 39 años",])
g4 <- nrow(df_corte[df_corte$GRUPEDAD_UH=="40 a 49 años",])
#hago tasas
g1 <- nrow(datosMujeres[datosMujeres$GRUPEDAD=="14 a 19 años",])
datosMujeres$GRUPEDAD <- ifelse(datosMujeres$GRUPEDAD==1, "14 a 19 años",
ifelse(datosMujeres$GRUPEDAD == 2, "20 a 29 años",
ifelse(datosMujeres$GRUPEDAD==3, "30 a 39 años",
ifelse(datosMujeres$GRUPEDAD == 4, "40 a 49 años","50 a 59 aÃ±os"))))
#hago tasas
g1 <- nrow(datosMujeres[datosMujeres$GRUPEDAD=="14 a 19 años",])
totalEND<- nrow(datosMujeres[datosMujeres$MEP11 == "Embarazo no deseado",])
totalEND1 <- nrow(datosMujeres[datosMujeres$MEP11 == "Embarazo no deseado" & datosMujeres$GRUPEDAD == "14 a 19 años",])
totalEND2 <- nrow(datosMujeres[datosMujeres$MEP11 == "Embarazo no deseado" & datosMujeres$GRUPEDAD == "20 a 29 años",])
totalEND3 <- nrow(datosMujeres[datosMujeres$MEP11 == "Embarazo no deseado" & datosMujeres$GRUPEDAD == "30 a 39 años",])
totalEND4 <- nrow(datosMujeres[datosMujeres$MEP11 == "Embarazo no deseado" & datosMujeres$GRUPEDAD == "40 a 49 años",])
g1 <- nrow(datosMujeres[datosMujeres$GRUPEDAD=="14 a 19 años",])
g2 <- nrow(datosMujeres[datosMujeres$GRUPEDAD=="20 a 29 años",])
g3 <- nrow(datosMujeres[datosMujeres$GRUPEDAD=="30 a 39 años",])
g4 <- nrow(datosMujeres[datosMujeres$GRUPEDAD=="40 a 49 años",])
end_1 <- nrow(df_corte[df_corte$GRUPEDAD_UH=="13 a 19 años",])
end_2 <- nrow(df_corte[df_corte$GRUPEDAD_UH=="20 a 29 años",])
end_3 <- nrow(df_corte[df_corte$GRUPEDAD_UH=="30 a 39 años",])
end_4 <- nrow(df_corte[df_corte$GRUPEDAD_UH=="40 a 49 años",])
agrup <- c("13 a 19 años","20 a 29 años","30 a 39 años","40 a 49 años")
edades <- c(end_1,end_2,end_3,end_4)
end_grupE <- as.data.frame(cbind(agrup,edades))
View(end_grupE)
end_grupE <- as.data.frame(cbind(agrup,edades,totalEND))
View(end_grupE)
p <- plot_ly(end_grupE, labels = ~agrup, values = ~edades, type = 'pie') %>%
layout(title = "¿Los embarazos no deseados son solo una problemática adolescente?",
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
library(ggplot2)
library(plotly)
library(shiny)
p <- plot_ly(embarazosND, labels = ~Grupedad, values = ~Tasa, type = 'pie') %>%
layout(title = "¿Los embarazos no deseados son solo una problemática adolescente?",
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
p <- plot_ly(end_grupE, labels = ~agrup, values = ~edades, type = 'pie') %>%
layout(title = "¿Los embarazos no deseados son solo una problemática adolescente?",
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
View(p)
p
g3<-ggplot(df_corte,aes(x="",y=MEP11, fill=factor(MEP14)))+geom_bar(width=1,stat="identity")
g3<- g3 + coord_polar("y", start=0)
g3
plot_ly(embarazosND, labels = ~MEP14, values = , type = 'pie') %>%
layout(title = "¿Es suficiente educar sobre métodos anticonceptivos para prevenir embarazos no deseados?",
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
library(ggplot2)
library(plotly)
library(shiny)
rm(list = ls())
setwd("C:/Users/perla/OneDrive/Documents/ssyr/data")
datosMujeres=read.table("ENSSyR_Mujeres_BaseUsuario.txt", header=T, sep="|")
datosMujeres$MEP11 <- ifelse (datosMujeres$MEP11== 1, "Embarazo deseado","Embarazo no deseado" )
datosMujeres= datosMujeres[!is.na(datosMujeres$MEP11),]
df_corte <- datosMujeres[which (datosMujeres$MEP11=="Embarazo no deseado"),]
datosMujeres$MITS20 <- ifelse(datosMujeres$MITS20 == 1, "Católica",
ifelse(datosMujeres$MITS20 == 2, "Evangélica",
ifelse(datosMujeres$MITS20 == 3, "Judía",
ifelse(datosMujeres$MITS20 == 4, "Testigo de Jeohvá",
ifelse(datosMujeres$MITS20 == 5, "Mormón",
ifelse(datosMujeres$MITS20==7, "Adventista", "Otro"))))))
datosMujeres$MEP05 <- ifelse(datosMujeres$MEP05 == 1, "Si",
ifelse(datosMujeres$MEP05 == 2, "No", NA))
datosMujeres$MEP14 <- ifelse(datosMujeres$MEP14 == 1, "Si",
ifelse(datosMujeres$MEP14 == 2, "No", NA))
head(datosMujeres$MASA17_01)
datosMujeres$GRUPEDAD <- ifelse(datosMujeres$GRUPEDAD==1, "14 a 19 años",
ifelse(datosMujeres$GRUPEDAD == 2, "20 a 29 años",
ifelse(datosMujeres$GRUPEDAD==3, "30 a 39 años",
ifelse(datosMujeres$GRUPEDAD == 4, "40 a 49 años","50 a 59 aÃ±os"))))
datosMujeresAdult <- datosMujeres[which(datosMujeres$GRUPEDAD != 1),]
datosMujeresAdult$sector <- ifelse(datosMujeresAdult$NIVEL_INSTRUCCION_AGRUPADO < 3, "Popular","Medio/Alto")
datosMujeresAdult= datosMujeresAdult[!is.na(datosMujeresAdult$MEP11),]
totalEND<- nrow(datosMujeres[datosMujeres$MEP11 == "Embarazo no deseado",])
df_corte$canta <- 2013-df_corte$MEP10
summary(df_corte$canta)
df_corte$edadUH <- df_corte$EDAD-df_corte$canta
summary(df_corte$edadUH)
df_corte$GRUPEDAD_UH <- ifelse(df_corte$edadUH<20,"13 a 19 años",
ifelse(df_corte$edadUH<30, "20 a 29 años",
ifelse(df_corte$edadUH<40,"30 a 39 años",
ifelse(df_corte$edadUH<50,"40 a 49 años"))))
end_1 <- nrow(df_corte[df_corte$GRUPEDAD_UH=="13 a 19 años",])
end_2 <- nrow(df_corte[df_corte$GRUPEDAD_UH=="20 a 29 años",])
end_3 <- nrow(df_corte[df_corte$GRUPEDAD_UH=="30 a 39 años",])
end_4 <- nrow(df_corte[df_corte$GRUPEDAD_UH=="40 a 49 años",])
agrup <- c("13 a 19 años","20 a 29 años","30 a 39 años","40 a 49 años")
edades <- c(end_1,end_2,end_3,end_4)
end_grupE <- as.data.frame(cbind(agrup,edades,totalEND))
p <- plot_ly(end_grupE, labels = ~agrup, values = ~edades, type = 'pie') %>%
layout(title = "¿Los embarazos no deseados son solo una problemática adolescente?",
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
p
s1 <- nrow(datosMujeresAdult[datosMujeresAdult$sector == "Medio/Alto",])
s2 <- nrow(datosMujeresAdult[datosMujeresAdult$sector == "Popular",])
END_S_1 <- nrow(datosMujeres[datosMujeresAdult$sector == "Medio/Alto" & datosMujeresAdult$MEP11== "Embarazo no deseado",])
END_S_2 <- nrow(datosMujeres[datosMujeresAdult$sector == "Popular" & datosMujeresAdult$MEP11== "Embarazo no deseado",])
embarazosnd_sector <- as.data.frame(rbind(s1,s2))
colnames(embarazosnd_sector)<-c("Cantidad")
embarazosnd_sector$Cant_END <- c(END_S_1,END_S_2)
embarazosnd_sector$tasa <- round(embarazosnd_sector$Cant_END*100/embarazosnd_sector$Cantidad,2)
embarazosnd_sector$total <- c(100)
embarazosnd_sector$sector <- c("Medio/Alto","Popular")
g2<-ggplot(embarazosnd_sector, aes(x="", y=tasa, fill=sector))+geom_bar(width=1,stat="identity")+coord_polar("y", start=0)
plot_ly(embarazosnd_sector, labels = ~sector, values = ~tasa, type = 'pie') %>%
layout(title = "¿Los embarazos no deseados son solo una problemática de mujeres pobres?",
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
g3<-ggplot(df_corte,aes(x="",y=MEP11, fill=factor(MEP14)))+geom_bar(width=1,stat="identity")
g3<- g3 + coord_polar("y", start=0)
plot_ly(embarazosND, labels = ~MEP14, values = , type = 'pie') %>%
layout(title = "¿Es suficiente educar sobre métodos anticonceptivos para prevenir embarazos no deseados?",
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
g3
plot_ly(datosMujeres, labels = ~MEP14, values = , type = 'pie') %>%
layout(title = "¿Es suficiente educar sobre métodos anticonceptivos para prevenir embarazos no deseados?",
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
